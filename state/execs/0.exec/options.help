server.propertiesPath          <  str> :  []
server.collapseDetails         < bool> :  [false]
server.numThreads              <  int> :  [4]
server.logPath                 <  str> :  []
server.basePath                <  str> :  [www]
server.port                    <  int> :  [8400]
data.maxSentenceLength         <  int> :  [2147483647]
data.testFrac                  <  dbl> : Fraction of general examples to use as testing [0.3]
data.generalPaths              < str*> : Paths to data to be split into training and test [evaluator/domains/dbquery/geoquery/1/geoquery.dlog evaluator/domains/dbquery/geoquery/1/lexicon.dlog /var/folders/96/l9slz8653611_fgty2qxpp9w0000gn/T/tmpekxh8kg4.dlog]
data.trainPaths                < str*> : Paths to training data []
data.testPaths                 < str*> : Paths to test data []
data.generalMaxExamples        <  int> : Number of examples to load from generalPaths [MAX]
data.trainMaxExamples          <  int> : Number of examples to load from trainPaths [2147483647]
data.testMaxExamples           <  int> : Number of examples to load from testPaths [2147483647]
data.trainFrac                 <  dbl> : Fraction of general examples to use as training [0.7]
data.permuteExamples           < bool> : Whether to permute general examples before dividing [true]
data.generalExampleOffset      <  int> : Start reading with this example [0]
data.verbose                   <  int> : Verbosity level [0]
data.random                    < rand> : Random seed used to split general examples [1]
parser.lowercase               < bool> : Path to store cached parse trees [true]
parser.cachedPath              <  str> : Path to store cached parse trees []
parser.command                 <  str> : Path to sentence parser (stdin:sentences, stdout:parse trees) [bash lib/lowercase-parser]
log.maxIndLevel                <  int> : Maximum indent level. [10]
log.msPerLine                  <  int> : Maximum number of milliseconds between consecutive lines of output. [0]
log.file                       <  str> : File to write log. [/Users/yunhaoyang/Desktop/MGMAE/state/execs/0.exec/log]
log.stdout                     < bool> : Whether to output to the console. [true]
log.note                       <  str> : Dummy placeholder for a comment []
log.forcePrint                 < bool> : Force printing from logs* [false]
log.maxPrintErrors             <  int> : Maximum number of errors (via error()) to print [10000]
learn.permuteExamples          < bool> : Permute examples each training iteration [false]
learn.random                   < rand> : Random seed used to permute examples [1]
learn.useAdaptiveGrad          < bool> : Use AdaGrad [false]
learn.miniBatchSize            <  int> : Update this many examples at once [MAX]
learn.stepSizeReductionPower   <  dbl> : Power on step size reduction (1.0 = 1/t; 0.5 = 1/sqrt(t)) [0.0]
learn.numIters                 <  int> : Number of iterations [5]
learn.initStepSize             <  dbl> : Initial stepsize [1.0]
learn.updateType               <  str> : Type of update (gradient|full) [full]
learn.regularization           <  dbl> : Regularization parameter (lambda) [0.01]
learn.randTrainOrder           < bool> : Whether to randomize the training examples [false]
learn.maxOutput                <  int> : Maximum number of lines to output [2147483647]
learn.passiveAggressive        < bool> : Passive aggressive updates: only update when the margin isn't large enough [false]
learn.marginProb               <  dbl> : When do gradient update, take <=maxNudgeSteps until we get to this probability [0.7]
learn.maxNudgeSteps            <  int> : Maximum number of lines to output [1]
learn.lbfgs.historySize        <  int> :  [5]
main.debug                     < bool> :  [false]
main.launchParser              < bool> :  [false]
main.startServer               < bool> :  [false]
main.interactive               < bool> :  [false]
model.features                 < str*> : Features to use for learning [pred pred2 predarg lexpred lexnull]
model.timeout                  <  int> :  [0]
model.useSyntax                < bool> :  [true]
model.pruneEmptyDen            < bool> :  [false]
model.pruneErrDen              < bool> :  [false]
model.pruneInfDen              < bool> : The final denotation of a sentence cannot be infinite [false]
model.beamSize                 <  int> :  [100]
model.forceRightBranching      < bool> :  [false]
model.forceParseSyntax         < bool> :  [false]
model.autoUpdate               < bool> : In interactive mode, whether to automatically learn [false]
model.useBayesianAveraging     < bool> : Bayesian averaging to produce result [true]
model.allowDelayedExtraction   < bool> : Allow extraction in other places besides right before execute (if false, just enough to do simple superlatives/quantification) [false]
model.implicit1k               < bool> : Allow insertion of implicit bridge predicates between arity 1 and arity k>1 [false]
model.implicitk1               < bool> : Allow insertion of implicit bridge predicates between arity k>1 and arity 1 [false]
model.allowNonProjectivity     < bool> :  [false]
model.allowTroll               < bool> : Try attaching things under the bridge [true]
model.usePosOnlyIfNoMatches    < bool> : Only use POS predicates when nothing else matches [false]
model.usePosOnlyIfNoPhraseMatches < bool> : Only use POS predicates when nothing matches in phraseMap [false]
model.learnLexicon             < bool> : Add items to the lexicon each iteration [false]
model.lexiconPruneThreshold    <  dbl> : Remove word-predicate entries from the lexicon with posterior probability less than this [1.0E-4]
model.oldAttach                < bool> : Old version of attach [false]
model.hackComparatives         < bool> : more long than => long more than [false]
model.lexToName                < bool> :  [true]
model.lexToSetWithName         < bool> :  [true]
model.lexToObjWithName         < bool> :  [true]
model.normPhrasePrefixLen      <  int> :  [2147483647]
model.inParamsPath             <  str> :  []
model.outParamsPath            <  str> :  []
model.outBasketsPath           <  str> :  []
model.posTagDictPath           <  str> : Dictionary (word/POS pairs) []
model.lexToTime                < bool> :  [false]
model.dlogOptions              < str*> : Of the form x=3, interpreted as x(3). [lexMode=0]
model.verbose                  <  int> :  [2]
exec.create                    < bool> : Whether to create a directory for this run; if not, don't generate output files [true]
exec.monitor                   < bool> : Whether to create a thread to monitor the status. [true]
exec.execDir                   <  str> : Directory to put all output files; if blank, use execPoolDir. []
exec.execPoolDir               <  str> : Directory which contains all the executions (or symlinks). [/Users/yunhaoyang/Desktop/MGMAE/state/execs]
exec.actualExecPoolDir         <  str> : Directory which actually holds the executions. []
exec.overwriteExecDir          < bool> : Overwrite the contents of the execDir if it doesn't exist (e.g., when running a thunk). [false]
exec.useStandardExecPoolDirStrategy < bool> : Assume in the run directory, automatically set execPoolDir and actualExecPoolDir [true]
exec.printOptionsAndExit       < bool> : Simply print options and exit. [false]
exec.miscOptions               < str*> : Miscellaneous options (written to options.map and output.map, displayed in servlet); example: a=3 b=4 [new4]
exec.addToView                 < str*> : Name of the view to add this execution to in the servlet [geo3]
exec.recordPath                <  str> : Record file to write to []
exec.charEncoding              <  str> : Character encoding []
exec.jarFiles                  < str*> : Name of jar files to load prior to execution [evaluator/evaluator.jar]
exec.dontInitializeJars        < bool> : Skip initialization of jars [false]
exec.initializeJarsAfterDirCreation < bool> : Initialize from jars after copying them to a newly created execDir [false]
exec.makeThunk                 < bool> : Make a thunk (a delayed computation). [false]
exec.thunkAutoQueue            < bool> : A note to the servlet to automatically run the thunk when it sees it [false]
exec.thunkPriority             <  int> : Priority of the thunk. [0]
exec.thunkMainClassName        <  str> : Launch this class []
exec.thunkJavaOpts             <  str> : Java options to pass to Java when later running the thunk []
exec.thunkReqMemory            <  int> : Required memory (in MB) [1024]
exec.dontCatchExceptions       < bool> : Whether to catch exceptions (ignored when making a thunk) [false]
int.maxCost                    <  int> : Throw an error if cost exceeds this [100000]
int.displayMaxSetSize          <  int> :  [1]
int.displayTypes               < bool> :  [false]
int.displayDens                < bool> :  [false]
int.displaySpans               < bool> :  [false]
int.prettyMaxSetSize           <  int> :  [10]
int.crashOnTypeError           < bool> :  [false]
int.roundNumDigits             <  int> :  [2147483647]
int.verbose                    <  int> :  [0]
int.random                     < rand> :  [1]
learn.backtrack.stepSizeDecrFactor <  dbl> :  [0.9]
learn.backtrack.stepSizeIncrFactor <  dbl> :  [1.3]
learn.backtrack.maxTries       <  int> :  [100]
learn.backtrack.tolerance      <  dbl> :  [1.0E-5]
learn.backtrack.initStepSize   <  dbl> :  [1.0]
